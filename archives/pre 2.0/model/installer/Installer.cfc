<!-----------------------------------------------------------------------Author 	 :	Luis MajanoDate     :	September 23, 2005Description :	This is my own Coldbox installer CFC. It takes care of updates, backups and installations.Modification History:01/27/2006 - Updated to ver 1.23 of Coldbox.06/19/2006 - Updated for Coldbox-----------------------------------------------------------------------><cfcomponent name="Installer" hint="A ColdBox installer CFC."><!------------------------------------------- CONSTRUCTOR ------------------------------------------->	<cfscript>	//Setup Structure	variables.setupStruct = StructNew();	//Implementation Settings	variables.implementationSettings = StructNew();	//Valid InstallTypes	variables.validInstallTypes = "framework,dashboard";	//Implemenation CFC	variables.implementationCFC = "";	//Init the installer	initSetupStructure();	</cfscript><!------------------------------------------- PUBLIC ------------------------------------------->	<cffunction name="init" access="public" returntype="any" output="false">		<!--- ************************************************************* --->		<cfargument name="setupPacket"  type="string" required="yes" hint="The setup packet">		<!--- ************************************************************* --->		<cfset var incomingSetupStruct = structNew()>		<!--- Test For Packet --->		<cfif not isWDDX(arguments.setupPacket)>			<cfthrow message="Invalid setupPacket detected. Aborting installation" detail="You will need to remove this directory manually.">			<cfabort>		</cfif>		<!--- Read the setup Packet --->		<cfwddx action="wddx2cfml" input="#arguments.setupPacket#" output="incomingSetupStruct">		<!--- Append to local Setup structure --->		<cfset structAppend(variables.setupStruct, incomingSetupStruct, true)>		<!--- Check for install Type --->		<cfif setupStruct.installationType eq "" or listfindnocase(variables.validInstallTypes, setupStruct.InstallationType) eq 0>			<cfthrow message="Invalid InstallationType detected. Aborting Installation." detail="You will need to remove this directory manually.">			<cfabort>		</cfif>		<!--- Parse the implementation config --->		<cfset parseImplementationConfig()>		<!--- Create the Implementation CFC --->		<cfset variables.implementationCFC = CreateObject("component","#variables.implementationSettings.IMPLEMENTATION_CFC#").init(variables.setupStruct, variables.implementationSettings)>		<!--- Return --->		<cfreturn this>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="getInstallerTitle" access="public" hint="Get the Installtion Title" returntype="string" output="false">		<cfreturn variables.implementationSettings.installer_title>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="getInstallerMessage" access="public" hint="Get the Installtion message" returntype="string" output="false">		<cfreturn variables.implementationSettings.installer_message>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="errorHandler" access="public" hint="Render the failure url" returntype="any" output="false">		<cfset var results = "">		<cfsavecontent variable="results">			<cfoutput>			<script language="javascript">				window.location = '#variables.implementationSettings.failure_url#&installerror=#URLEncodedFormat(variables.implementationCFC.getErrorMessage())#';			</script>			</cfoutput>			</cfsavecontent>		<cfreturn results>	</cffunction>	<!--- ************************************************************* --->	<cffunction name="successHandler" access="public" hint="render the success url" returntype="any" output="false">		<cfset var results = "">		<cfsavecontent variable="results">		<cfoutput>		<script language="javascript">			window.location = "#variables.implementationSettings.success_url#";		</script>		</cfoutput>		</cfsavecontent>		<cfreturn results>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="startInstall" access="public" hint="Start the installation" returntype="struct">		<cfset var rtnStruct = structnew()>		<cfset var methodCall = "">		<cfset rtnStruct.error = 1>		<cftry>			<!--- Call the start method of the implementation cfc --->			<cfset variables.implementationCFC.start()>			<!--- Check for abort --->			<cfif variables.abortInstall>				<cfdump var="#variables.errorMessage#">				<cfabort>			</cfif>			<!--- Set Error Free --->			<cfset rtnStruct.error = 0>			<!--- Catch Any Implementation Errors --->			<cfcatch type="any">				<cfset variables.implementationCFC.setErrorMessage("Error Installing Update: #cfcatch.Detail#<bR>#cfcatch.Message#")>			</cfcatch>		</cftry>		<cfreturn rtnStruct>	</cffunction>	<!--- ************************************************************* ---><!------------------------------------------- PRIVATE ------------------------------------------->		<cffunction name="initSetupStructure" access="private" returntype="void" output="false">		<cfscript>		//Generate the Installer variables.		variables.setupStruct.OS = Server.OS.Name;		//FS Determination		if (FindNoCase("Windows", variables.setupStruct.os) )			variables.setupStruct.fs = "\";		else			variables.setupStruct.fs = "/";					//Install Type: backup/update		variables.setupStruct.InstallationType = "";		//Proxy Settings;		variables.setupStruct.ProxyFlag = "";		variables.setupStruct.ProxyServer = "";		variables.setupStruct.ProxyPort = "";		variables.setupStruct.ProxyUsername = "";		variables.setupStruct.ProxyPassword = "";		//Installer Directory & Update Directory		variables.setupStruct.InstallerDir = "";		variables.setupStruct.UpdateTempDir = "";		//Update File INfo		variables.setupStruct.UpdateFileURL = "";		variables.setupStruct.updateFileSize = 0;		//Version Info		variables.setupStruct.CurrentVersion = 0;		variables.setupStruct.NewVersion = 0;		//Filename of the downloaded update		variables.setupStruct.DownloadedFileName = "";		//Filename of the backup to create		variables.setupStruct.BackupFilename = "";		//The path of the backups directory in the temp directory		variables.setupStruct.BackupsPath = "";		//The target path for delivery and backup		variables.setupStruct.TargetPath = "";				//Implemenetation Settings		variables.implementationSettings.download_timeout = "";		variables.implementationSettings.installer_title = "";		variables.implementationSettings.installer_message = "";		variables.implementationSettings.implementation = "";		variables.implementationSettings.implementation_cfc = "";		variables.implementationSettings.success_url = "";		variables.implementationSettings.failure_url = "";		</cfscript>	</cffunction>		<!--- ************************************************************* --->	<cffunction name="parseImplementationConfig" output="false" access="public" returntype="void" hint="Parse the implemntation config.">
		<cfset var xmlObj = "">		<!--- Verify that config xml file exists --->		<cfif not FileExists(expandPath(variables.setupStruct.installationType & ".xml"))>			<cfthrow message="The configuration file for the #variables.setupStruct.installationType# installation cannot be located." >		</cfif>		<!--- Parse the implementation.xml file --->		<cfset xmlObj = XMLParse(expandPath(variables.setupStruct.installationType & ".xml"))>		<!--- Setup The structure --->		<cfset variables.implementationSettings.download_timeout = Trim(xmlObj.xmlRoot.download_timeout.xmlText)>		<cfset variables.implementationSettings.installer_title = Trim(xmlObj.xmlRoot.installer_title.xmlText)>		<cfset variables.implementationSettings.installer_message = Trim(xmlObj.xmlRoot.installer_message.xmlText)>		<cfset variables.implementationSettings.implementation = Trim(xmlObj.xmlRoot.installer_title.xmlText)>		<cfset variables.implementationSettings.implementation_cfc = Trim(xmlObj.xmlRoot.implementation_cfc.xmlText)>		<cfset variables.implementationSettings.success_url = Trim(xmlObj.xmlRoot.success_url.xmlText)>		<cfset variables.implementationSettings.failure_url = Trim(xmlObj.xmlRoot.failure_url.xmlText)>	</cffunction>


									<!--- ************************************************************* --->	<cffunction name="backupInstallation" access="private" hint="backup your ColdBox install" returntype="void">		<!--- File Separator --->		<cfset var FS = getSetupKey("FileSeparator")>		<cfset var rtn = "">		<!--- Backup the original System Folder --->		<cfinvoke component="#variables.objZip#"				  method="AddFiles"				  returnvariable="rtn">			<cfinvokeargument name="ZipFilePath" 	value="#getSetupKey("BackupsPath")##FS##getSetupKey("FrameworkBackupName")#">			<cfinvokeargument name="directory" 		value="#getSetupKey("BackupDirectoryPath")#">			<cfinvokeargument name="recurse" 		value="true">		</cfinvoke>	</cffunction>	<!--- ************************************************************* --->	</cfcomponent>