<!-----------------------------------------------------------------------Author 	 :	Luis MajanoDate     :	September 23, 2005Description :	This is my own Coldbox installer CFC. It takes care of updates, backups and installations.Modification History:01/27/2006 - Updated to ver 1.23 of Coldbox.06/19/2006 - Updated for Coldbox-----------------------------------------------------------------------><cfcomponent name="Installer" hint="A ColdBox installer CFC."><!---../system/admin/index.cfm?install=ehColdbox.doRollback&installerror=#getErrorMessage()#---><!------------------------------------------- CONSTRUCTOR ------------------------------------------->	<cfscript>		variables.objZip = CreateObject("component","Zip");		//Setup Structure		variables.setupStruct = StructNew();		variables.setupStruct.downloadTimeout = 10;		variables.setupStruct.os = Server.OS.Name;		//FS Determination		if (FindNoCase("Windows", variables.setupStruct.os) )			variables.setupStruct.FileSeparator = "\";		else			variables.setupStruct.FileSeparator = "/";		//Install Type: backup/update		variables.setupStruct.InstallationType = "";		//Directory to backup to		variables.setupStruct.BackupsPath = "";		//Directory To backup		variables.setupStruct.BackupDirectoryPath = "";		//Framework Full Directory Path		variables.setupStruct.FrameworkPath = "";		//Current Framework Version		variables.setupStruct.FrameworkVersion = "";		//The new version to install if used		variables.setupStruct.FrameworkNewVersion = "";		//Current Framework BackupName to use.		variables.setupStruct.FrameworkBackupName = "";		//The Update File URL		variables.setupStruct.FrameworkUpdateFileURL = "";		//FileSize of new file		variables.setupStruct.FrameworkUpdateFileSize = 0;		//The update file name to use:		variables.setupStruct.FrameworkUpdateFileName = "";		//The password file path to save		variables.setupStruct.PasswordFilePath = "";		//Password Destination		variables.setupStruct.PasswordFileDestination = "";		//The update Temporary directory		variables.setupStruct.UpdateTempDir = "";		//The installer Directory		variables.setupStruct.installerDir = "";		//The path of the main parent application		variables.setupStruct.ParentPath = "";		//Backup Variables		variables.backup = Structnew();		variables.backup.Title = "ColdBox Backup Module";		variables.backup.Message = "Backing Up Your Data...";		variables.backup.MethodCall = "backupInstallation";		variables.backup.RelocateURL = "../index.cfm?event=ehColdbox.dspBackups&finished=ok";		//Update Variables		variables.update = Structnew();		variables.update.Title = "Updating ColdBox";		variables.update.Message = "Installing your new version of ColdBox";		variables.update.MethodCall = "updateInstallation";		variables.update.RelocateURL = "../system/admin/index.cfm?event=ehColdBox.doInstall&fwreinit=1";		//Error Property		variables.errorMessage = "";		variables.abortInstall = false;	</cfscript><!------------------------------------------- PUBLIC ------------------------------------------->	<!--- ************************************************************* --->	<cffunction name="init" access="public">		<!--- ************************************************************* --->		<cfargument name="setupPacket"  type="string" required="yes" hint="The setup packet">		<!--- ************************************************************* --->		<cfset var setup = structNew()>		<!--- Test For Packet --->		<cfif not isWDDX(arguments.setupPacket)>			<cfthrow message="Invalid setupPacket.">			<cfabort>		</cfif>		<!--- Read the setup Packet --->		<cfwddx action="wddx2cfml" input="#arguments.setupPacket#" output="setup">		<!--- Append to local Setup structure --->		<cfset structAppend(variables.setupStruct, setup, true)>		<!--- Check for install Type --->		<cfif setupStruct.installationType eq "">			<cfthrow message="Invalid InstallationType.">			<cfabort>		</cfif>		<!--- Return --->		<cfreturn this>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getTitle" access="public" hint="Get the Installtion Title" returntype="string" output="false">		<cfreturn evaluate("variables.#getSetupKey("InstallationType")#.title")>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getMessage" access="public" hint="Get the Installtion message" returntype="string" output="false">		<cfreturn evaluate("variables.#getSetupKey("InstallationType")#.message")>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="errorHandler" access="public" hint="Determine the error procedure to use" returntype="any" output="false">		<cfset var results = "">		<cfif getSetupKey("InstallationType") eq "update">			<cfsavecontent variable="results">			<cfoutput>			<script language="javascript">				window.location = '../system/admin/index.cfm?install=ehColdBox.doRollback&installerror=#URLEncodedFormat(getErrorMessage())#';			</script>			</cfoutput>			</cfsavecontent>		<cfelseif getSetupKey("InstallationType") eq "backup">			<cfsavecontent variable="results">			<cfoutput>			<div class="errorMessage">			<h2>Alert Message:</h2>			An unexpected error occurred.<br>Diagnostics:<br><Br>#getErrorMessage()#<br><br>			<a href="#variables.update.RelocateURL#">Click here to return to the backups manager</a>			</div>			</cfoutput>			</cfsavecontent>		</cfif>		<cfreturn results>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="successHandler" access="public" hint="Determine the succes procedure to use" returntype="any" output="false">		<cfset var results = "">		<cfset var relocateURL = evaluate(getSetupKey("Installationtype") & ".RelocateURL")>		<cfsavecontent variable="results">		<cfoutput>		<script language="javascript">			window.location = '#relocateURL#';		</script>		</cfoutput>		</cfsavecontent>		<cfreturn results>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="startInstall" access="public" hint="Start the installation" returntype="struct">		<cfset var rtnStruct = structnew()>		<cfset var methodCall = "">		<cfset rtnStruct.error = 1>		<cftry>			<!--- Call different process by Installation Type --->			<cfset methodCall = evaluate("#getSetupKey("Installationtype")#.MethodCall")>			<cfset evaluate("#methodCall#()")>			<!--- Check for abort --->			<cfif variables.abortInstall>				<cfdump var="#variables.errorMessage#">				<cfabort>			</cfif>			<!--- Set Error Free --->			<cfset rtnStruct.error = 0>			<!--- Catch Any Errors --->			<cfcatch type="any">				<cfset setErrorMessage("#cfcatch.Detail#<bR>#cfcatch.Message#")>			</cfcatch>		</cftry>		<cfreturn rtnStruct>	</cffunction>	<!--- ************************************************************* ---><!------------------------------------------- PRIVATE ------------------------------------------->		<!--- ************************************************************* --->	<cffunction name="getSetupKey" access="private" hint="Get a setup key" returntype="any" output="false">		<cfargument name="setting" required="true" type="string">		<cfreturn variables.setupStruct["#arguments.setting#"]>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getErrorMessage" access="private" hint="Get the error message" returntype="string" output="false">		<cfreturn variables.errorMessage>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="setErrorMessage" access="private" hint="Set the error message" returntype="void" output="false">		<cfargument name="message" required="true" type="string">		<cfset variables.errorMessage = arguments.message>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="backupInstallation" access="private" hint="backup your ColdBox install" returntype="void">		<!--- File Separator --->		<cfset var FS = getSetupKey("FileSeparator")>		<cfset var rtn = "">		<!--- Backup the original System Folder --->		<cfinvoke component="#variables.objZip#"				  method="AddFiles"				  returnvariable="rtn">			<cfinvokeargument name="ZipFilePath" 	value="#getSetupKey("BackupsPath")##FS##getSetupKey("FrameworkBackupName")#">			<cfinvokeargument name="directory" 		value="#getSetupKey("BackupDirectoryPath")#">			<cfinvokeargument name="recurse" 		value="true">		</cfinvoke>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="updateInstallation" access="private" hint="Start the installation" returntype="void">		<!--- File Separator --->		<cfset var FS = getSetupKey("FileSeparator")>		<cfset var downloadedFileSize = 0>		<cfset var rtnZip = "">		<!--- ************************************************ --->		<!--- DOWNLOAD UDPATE FILE 							   --->		<!--- ************************************************ --->		<cftry>			<!--- Download File --->			<cfhttp url="#getSetupKey('FrameworkUpdateFileURL')#"					method="get"					timeout="#getSetupKey('downloadTimeout')#"					file="#getSetupKey('FrameworkUpdateFileName')#"					path="#getSetupKey('updateTempDir')#" />			<cfcatch type="any">				<cfthrow message="Error downloading file from distribution URL.<br><br>#cfcatch.detail# #cfcatch.message#">			</cfcatch>		</cftry>		<!--- ************************************************ --->		<!--- COMPARE FILE SIZES 							   --->		<!--- ************************************************ --->		<cftry>			<!--- Compare File Sizes--->			<cfset downloadedFileSize = getFileSize("#getSetupKey('updateTempDir')##fs##getSetupKey('FrameworkUpdateFileName')#")>			<cfif downloadedFileSize lt getSetupKey("FrameworkUpdateFileSize")>				<!--- Delete File --->				<cffile action="delete" file="#getSetupKey('updateTempDir')##fs##getSetupKey('FrameworkUpdateFileName')#">				<cfthrow message="The file size of the downloaded file does not match the original file. Please verify that you can download this file.">			</cfif>			<cfcatch type="any">				<cfthrow message="Error comparing update file size.<br><br>#cfcatch.detail# #cfcatch.message#">			</cfcatch>		</cftry>		<!--- ************************************************ --->		<!--- EXTRACT UPDATE FILE 							   --->		<!--- ************************************************ --->		<cftry>			<!--- Extract File --->			<cfinvoke component="#objZip#"					  method="Extract"					  returnvariable="rtnZip">				<cfinvokeargument name="ZipFilePath" value="#getSetupKey('updateTempDir')##fs##getSetupKey('FrameworkUpdateFileName')#">				<cfinvokeargument name="extractPath" value="#getSetupKey('updateTempDir')#">			</cfinvoke>			<cfcatch type="any">				<cfthrow message="Error extracting update file.<br><br>#cfcatch.detail# #cfcatch.message#">			</cfcatch>		</cftry>		<!--- ************************************************ --->		<!--- COPY OVER PASSWORD FILE						   --->		<!--- ************************************************ --->		<cftry>			<!--- Copy Over Password File to new system folder --->			<cffile action="copy"					source="#getSetupKey('PasswordFilePath')#"					destination="#getSetupKey('PasswordFileDestination')#"					nameconflict="overwrite"					mode="777">			<cfcatch type="any">				<cfthrow message="Error copying existent password file.<br><br>#cfcatch.detail# #cfcatch.message#">			</cfcatch>		</cftry>		<!--- ************************************************ --->		<!--- BACKUP ORIGINAL INSTALLATION FILE				   --->		<!--- ************************************************ --->		<cftry>			<!--- Check if backup folder exists --->			<cfif not DirectoryExists("#getSetupKey('BackupsPath')#")>				<cfdirectory action="create" directory="#getSetupKey('BackupsPath')#" mode="777">			</cfif>			<!--- Backup the original System Folder --->			<cfset backupInstallation()>			<cfcatch type="any">				<cfthrow message="Error backing up existent ColdBox Installation.<br><br>#cfcatch.detail# #cfcatch.message#">			</cfcatch>		</cftry>		<!--- ************************************************ --->		<!--- REMOVE OLD SYSTEM 							   --->		<!--- ************************************************ --->		<cftry>			<!--- Move Old System --->			<cfdirectory action="delete"						 directory="#getSetupKey('FrameworkPath')#"						 recurse="yes">			<!--- Copy New System --->			<cffile action="move"			        mode="777"					source="#getSetupKey('updateTempDir')##FS#system"					destination="#getSetupKey('ParentPath')#">			<cfcatch type="any">				<cfset setErrorMessage("A serious error occurred while moving the new system folder from the temporary install path.	A copy of the old system folder is now under _tempinstall directory along with the new system path.#cfcatch.Detail#<bR>#cfcatch.Message#")>				<cfset variables.abortInstall = true>			</cfcatch>		</cftry>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getFileSize" access="private" returntype="string" output="false" hint="Get the filesize of a file.">		<!--- ************************************************************* --->		<cfargument name="filename"   type="string" required="yes">		<cfargument name="sizeFormat" type="string" required="no" default="bytes"					hint="Available formats: [bytes][kbytes][mbytes][gbytes]">		<!--- ************************************************************* --->		<cfscript>		var objFile =  createObject("java","java.io.File");		objFile.init(JavaCast("string", filename));		if ( arguments.sizeFormat eq "bytes" )			return objFile.length();		if ( arguments.sizeFormat eq "kbytes" )			return (objFile.length()/1024);		if ( arguments.sizeFormat eq "mbytes" )			return (objFile.length()/(1048576));		if ( arguments.sizeFormat eq "gbytes" )			return (objFile.length()/1073741824);		</cfscript>	</cffunction>	<!--- ************************************************************* --->	</cfcomponent>