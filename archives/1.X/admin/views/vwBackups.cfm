<!--- Get References ---><cfset dirListing = getValue("dirlisting")><cfset fileSeparator = getSetting("OSFileSeparator",1)><!--- Render MessageBox ---><cfoutput>#getPlugin("MessageBox").render()#</cfoutput><!--- Styles ---><cfsavecontent variable="buttonStyle">borderThickness: 0; fill-colors: #C5D2A4, #E1F0BC; color: #ffffff;</cfsavecontent><cfform action="#cgi.SCRIPT_NAME#" 	    name="treeviewer" 		format="flash"	    height="475" 		preloader="true" 		style="background-color: ##E2E4D9;"		onload="formOnLoad()">			<cfformitem type="script">	function formOnLoad(){		// Do anything that you need to do in the onload Event				// call the function that is in charge of applying the styles		applyStyles();	}	function applyStyles(){		_global.styles.Button.setStyle("borderThickness",0);		_global.styles.Button.setStyle("color", 0x000000);		_global.styles.Button.setStyle("fillColors", [0xC5D2A4,0xE1F0BC]);		_global.styles.Panel.setStyle("backgroundColor", 0xEFF3E6);		_global.styles.Panel.setStyle("color", 0x000000);		_global.styles.Panel.setStyle("headerColors", [0xC5D2A4,0xE1F0BC]);		_global.styles.Panel.setStyle("footerColors", [0xE1F0BC,0xC5D2A4]);		_global.styles.Alert.setStyle("backgroundColor", 0xEFF3E6);		_global.styles.Alert.setStyle("color", 0x000000);		_global.styles.Alert.setStyle("fontWeight", "bold");		_global.styles.Alert.setStyle("fontSize", 10);		_global.styles.Alert.setStyle("headerColors", [0xC5D2A4,0xE1F0BC]);		_global.styles.HBox.setStyle("backgroundColor", 0x006699);		_global.styles.HBox.setStyle("marginTop", 10);		_global.styles.HBox.setStyle("marginBottom", 10);		_global.styles.HBox.setStyle("marginLeft", 10);		_global.styles.TextArea.setStyle("fontSize",10);		_global.styles.TextInput.setStyle("fontSize",10);		_global.styles.TextInput.setStyle("headerColors",[0xC5D2A4,0xE1F0BC]);			}	</cfformitem>	<cfformitem type="script">	function removeFile(){		//Check for selections		var SelectedNode = directoryTree.selectedNode;		var DirectoryTree = directoryTree.getIsBranch(SelectedNode);		var FilePath = SelectedNode.getProperty('data').parent;		var Filename = SelectedNode.getProperty('data').display;		//Check that we have a selection First		if ( Filename == undefined || Filename == 'null')			alert("Please select a file to remove first", "Error");		else		//Check if we are trying to remove a directory		if ( DirectoryTree )			alert("You can only remove one file at a time.\n\nPlease select a file.", "Error");		else		{			//Handler For Alert			var alertHandler = function (evt)			{				if (evt.detail == mx.controls.Alert.YES)				{								//set FilePath						_root.filepath.text = FilePath;						_root.filename.text = Filename;						_root.event.text="ehColdbox.doRemoveFile";						_root.submitForm();				}			}			//create the alert			alert("Do you wish to remove the selected file:\n\n " + Filename, "Warning", mx.controls.Alert.YES | mx.controls.Alert.CANCEL, alertHandler);		}	}	</cfformitem>	<cfformitem type="script">	function getInfo()	{		//Create the text From the selected Node		var SelectedNode = directoryTree.selectedNode;		var FileAttributes = SelectedNode.getProperty('data').value;		var DirectoryTree = directoryTree.getIsBranch(SelectedNode);		var Filename = SelectedNode.getProperty('data').display;		var msgArray = FileAttributes.split(",");		var size = msgArray[2];		var sizeType = "Bytes";		if ( size > 1024 ){			size = Math.round(size/1024);			sizeType = "KBytes";		}		//Alert if nothing Found 		if ( Filename == undefined || Filename == 'null' || DirectoryTree)			alert("Please select a valid file to show properties about.", "Warning");		else{			var msg = '<p><b>Filename:</b> ' + msgArray[0] + '<br /><b>Size: </b>' + size + ' ' + sizeType + '<br /><b>Last Modified: </b>' + msgArray[3] + '<br /><br /><b>Directory:</b><br />' + msgArray[1] + '</p>';			var alertSettings:Object = {title:'File Properties', message: msg, width:450, height:220, headerHeight:27 };			errorpopup = mx.managers.PopUpManager.createPopUp(this, FormErrorException, true, alertSettings);			errorpopup.centerPopUp(this);		}	}	</cfformitem>	<cfformitem type="script">	function activateButtons(){		//Create the text From the selected Node		var SelectedNode = directoryTree.selectedNode;		var DirectoryTree = directoryTree.getIsBranch(SelectedNode);		var Filename = SelectedNode.getProperty('data').display;		if ( ! DirectoryTree ){			button_info.enabled = true;			button_view.enabled = true;			button_delete.enabled = true;		}else{			button_info.enabled = false;			button_view.enabled = false;			button_delete.enabled = false;		}	}	</cfformitem>	<cfformitem type="script">	function openFile(){		//Create the text From the selected Node		var SelectedNode = directoryTree.selectedNode;		var DirectoryTree = directoryTree.getIsBranch(SelectedNode);		var Filename = SelectedNode.getProperty('data').display;		var FilePath = SelectedNode.getProperty('data').parent;		var openURL = FilePath + "{sep}" + Filename;		if ( Filename == undefined || Filename == 'null' || DirectoryTree)			alert("Please select a valid file to download.", "Error");		else{			getURL("javascript:deliverFile('" + openURL + "')");				}	}	</cfformitem>		<cfformitem type="script">	function backup(){		//Handler For Alert		var alertHandler = function (evt){			if (evt.detail == mx.controls.Alert.YES){						_root.event.text="ehColdbox.doColdboxBackup";				_root.submitForm();			}		}		//create the alert		alert("Do you wish to backup your current ColdBox installation:\n\nThis procedure will compress all of your ColdBox system folder and place the zip file in the backups directory.", "Warning", mx.controls.Alert.YES | mx.controls.Alert.CANCEL, alertHandler);	}	</cfformitem>	<cfformitem type="script">	function app_backup(){		//Handler For Alert		var alertHandler = function (evt){			if (evt.detail == mx.controls.Alert.YES){						_root.event.text="ehColdbox.doAppBackup";				_root.submitForm();			}		}		//create the alert		alert("Do you wish to backup your Application:\n\nThis procedure will compress all of your application folder(s) and place the zip file in the backups directory.", "Warning", mx.controls.Alert.YES | mx.controls.Alert.CANCEL, alertHandler);	}	</cfformitem>	<cfformgroup label="Backups Directory Viewer" type="panel">					<!--- Buttons --->		<cfformgroup type="horizontal">									<cfinput type="button" enabled="false"					 name="button_info"					 tooltip="Get File's Attributes" 					 src="images/info.png" 					 width="35" 					 onClick="getInfo()" 					 style="#buttonStyle#">			<cfinput type="button" enabled="false"					 name="button_view"					 tooltip="Download the file" 					 src="images/download.png"					 width="35" 					 onClick="openFile()" 					 style="#buttonStyle#">			<cfinput type="button" enabled="false"					 tooltip="Remove the selected file."					 name="button_delete"					 src="images/delete.png"   					 onClick="removeFile()"					 width="35" 					 style="#buttonStyle#">			<cfinput type="button" 					 name="button_backup"					 tooltip="Backup your ColdBox system folder" 					 src="images/backup_icon.png"					 width="35" 					 onClick="backup()" 					 style="#buttonStyle#">			<cfinput type="button" 					 name="button_appbackup"					 tooltip="Backup your Application" 					 src="images/app_backup.png"					 width="35" 					 onClick="app_backup()" 					 style="#buttonStyle#">				</cfformgroup>					<!--- Directory Tree --->			<cftree name="directoryTree" 				height="275" 				highlighthref="yes" 				hscroll="yes"				vscroll="yes"				onChange="activateButtons()" >							<!--- Root of Tree, Backups --->			<cftreeitem value="#ExpandPath(getSetting("backupsPath"))#" 						expand="yes" 						display="Backups">									<!--- If there are no files, display No files Found Entry --->								<cfif dirListing.recordcount eq 0 >				<cftreeitem value="null" 							display="No Files Found"							expand="no" 							parent="#ExpandPath(getSetting("backupsPath"))#">			<cfelse>				<!--- Display Recursively --->				<cfset setDir = "">				<cfoutput query="dirListing">						<!--- if entry is a directory --->						<cfif type is "Dir">							<!--- get directory contents --->							<cfquery dbtype="query" name="qChilds">							select *							from dirListing							where directory = '#directory##fileSeparator##name#'							</cfquery>							<!--- Display Directory --->							<cftreeitem value="#directory##fileSeparator##name#" 										display="#name# (#qChilds.recordcount#)" 										expand="no" 										parent="#directory#">							<!--- If no childs, display Empty Directory --->							<cfif qChilds.recordcount eq 0>								<cftreeitem value="null" 											display="No Files Found"											expand="yes" 											parent="#directory##fileSeparator##name#">							</cfif>						<cfelse>							<!--- Else Display Files --->							<cftreeitem value="#name#,#directory#,#size#,#datelastmodified#" 										display="#name#"										parent="#directory#">						</cfif>									</cfoutput>							</cfif> <!--- If directory listing is empty --->								</cftree>	</cfformgroup>	<!--- Hidden Fields --->	<cfinput type="text" name="event" 		value="ehColdbox.dspBackups" visible="no">	<cfinput type="text" name="filepath" 	value="" 					visible="no">	<cfinput type="text" name="filename" 	value="" 					visible="no"></cfform>